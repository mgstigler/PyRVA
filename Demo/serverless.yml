service: PyRVA # NOTE: update this with your service name

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    slim: true

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: 'dev'
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: "Allow"
    Action: # Gives permission to DynamoDB tables in a specific region
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
    Resource: "arn:aws:dynamodb:us-east-1:174208833299:table/PyBrew"

# you can add packaging information here
#package:
include:
  - get_beers.py
  - create_beers.py

functions:
  getBeers:
    handler: get_beers.get
    events:
      - http:
          path: beers
          method: get
    request:
      template:
        application/json: '{ "type" : "$input.params(''type'')" }'

  createBeers:
    handler: create_beers.create
    events:
      - http:
          path: beers
          method: put

# you can add CloudFormation resource templates here
resources:
  Resources:
    PyBrew:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PyBrew
        AttributeDefinitions:
          - AttributeName: beer_type
            AttributeType: S
          - AttributeName: beer_name
            AttributeType: S
        KeySchema:
          - AttributeName: beer_type
            KeyType: HASH
          - AttributeName: beer_name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    PyBrewArn:
      Description: The ARN for the PyBrew Table
      Value:
        "Fn::GetAtt": [ PyBrew, Arn ]
      Export:
        Name: ${self:service}:${self:provider.stage}:PyBrewArn

